<?php namespace ProcessWire;

/**
 * Dribbble Feed Module for Processwire
 * Copyright 2017 by Dusan Kitic
 * http://nvslbs.com
 *
 * ProcessWire 3.x, Copyright 2016 by Ryan Cramer
 * https://processwire.com
 *
 */

class MarkupDribbbleFeed extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'Dribbble Feed',

			// version number
			'version' => 1,

			// summary is brief description of what this module is
			'summary' => 'Shows Dribbble feed from particular user.',

			// Author
			'author' => 'Dusan Kitic - Novus Labs',

			// Optional URL to more information about the module
			'href' => 'http://nvslbs.com',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks.
			'singular' => true,

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => false,

			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'dribbble',
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
	 *
	 */
	public function init() {

	}

	/**
	 * Render feed
	 * @param  boolean $return_array Return array with images or generate markup
	 * @return mixed
	 */
	public function render( $return_array = false ) {
		$images_feed = $this->getImages();
		if ( ! empty( $images_feed ) ) {
			if ( $return_array === false ) {
				echo '<ul class="dribbble-feed">';
				foreach ($images_feed as $image) {
					echo '<li class="dribbble-feed__item"><a href="' . $image['link'] . '"><img src="' . $image['image'] . '"></a></li>';
				}
				echo '</ul>';
			} else {
				return $images_feed;
			}
		} else {
			echo '<p>' . $this->_('Empty bucket?') . '</p>';
		}
	}

	/**
	 * Get images urls from cache or from Dribbble API
	 */
	public function getImages() {
		$dribbble_settings = $this->data;

		// Delete cache if it is disabled
		if ( empty( $dribbble_settings['cache_enabled'] ) ) {
			$this->wire('cache')->delete( 'dribbble_feed');
		}
		if ( $this->wire('cache')->get( 'dribbble_feed') ) {
			return $this->wire('cache')->get( 'dribbble_feed');
		} else {
			return $this->fetchImages();
		}
	}

	/**
	 * Fetch images from Dribbble API and cache their urls
	 * @return array
	 */
	public function fetchImages() {
		// Get module settings
		$dribbble_settings = $this->data;

		if ( ! empty( $dribbble_settings ) ) {
			$http = new WireHttp();
			$response = $http->get("https://api.dribbble.com/v1/users/{$dribbble_settings['username']}/shots/?per_page={$dribbble_settings['per_page']}&access_token={$dribbble_settings['access_token']}");
			if ( $response !== false ) {
				$response_json = json_decode( $response );
				$feed_images = array();
				foreach ($response_json as $item) {
					$feed_images[] = array( 'image' => $item->images->normal, 'link' => $item->html_url );
				}
				$cache_response = $this->wire('cache')->save( 'dribbble_feed', $feed_images, $dribbble_settings['cache_time'] );
				return $feed_images;
			} else {
				echo $this->_( "HTTP request failed: " ) . $http->getError();
			}
		} else {
			echo $this->_( "Something went wrong. Check module configuration." );
		}
	}

}
